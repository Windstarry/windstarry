import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.c9ba2ff1.js";const l="/windstarry/assets/22c08fcb832bf2fb7df27ee07981c4117417dd56bcc5e9f14059b11ed07b434e.22c08fcb.png",m=JSON.parse('{"title":"FastAPI对数据库的增删改查","description":"FastAPI对数据库的增删改查","frontmatter":{"title":"FastAPI对数据库的增删改查","description":"FastAPI对数据库的增删改查","date":"2023-4-10","recommend":2,"sticky":4,"tags":["python","项目实战","FastApi"],"categories":["python","FastApi"]},"headers":[],"relativePath":"learn/python/FastAPI对数据库的增删改查.md","filePath":"learn/python/FastAPI对数据库的增删改查.md"}'),p={name:"learn/python/FastAPI对数据库的增删改查.md"},e=o(`<h1 id="fastapi对数据库的增删改查" tabindex="-1">FastAPI对数据库的增删改查 <a class="header-anchor" href="#fastapi对数据库的增删改查" aria-label="Permalink to &quot;FastAPI对数据库的增删改查&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>FastAPI对数据库的操作通常是采用SQLAlchemy来实现的，这主要是由于后者会以面向对象的方式来操作表，同时SQLAlchemy用统一的接口使得程序与数据库相分离，降低了耦合度。 在FastAPI的官方文档中，有专门对SQLAlcheym的介绍，只不过该示例中是两个表，且表与表之间有外键约束，为了更清楚让刚入门的同学快速掌握FastAPI对数据库的操作，本文将以一个简单的表来说明如何在FastAPI中实现对数据库的增删改查操作。</p><h2 id="整体思路" tabindex="-1">整体思路 <a class="header-anchor" href="#整体思路" aria-label="Permalink to &quot;整体思路&quot;">​</a></h2><p>在官方文档中，FastAPI采用SQLAlchemy对数据库的操作是采用一种非常清晰的模块划分方式，即要操作一个数据表，通常用五个文件来实现：</p><ul><li>数据库配置文件： <strong>database.py</strong>主要完成对数据库的连接；</li><li>数据库中表对应的模型文件： <strong>models.py</strong>建立所需要的表对应的数据模型；</li><li>数据库中表所对应的架构文件： <strong>schemas.py</strong>这里采用pydantic来完成对数据表的基本校验，其实质是建立与表对应的类，它与<strong>models.py</strong>中类的区别在于<strong>models.py</strong>中是与表严格对应的，而schemas则可以根据表模型来定制适合不同场景的类。</li><li>增删改查操作文件： <strong>crud.py</strong>该文件中主要完成对数据库的各种读写操作。</li><li>主文件 <strong>main.py</strong>这里配置各种路由及get、post等方法。 本例中将以一个图书数据库来实现增删改查操作。接下来一起看看各种文件的设定。</li></ul><h2 id="一、数据库的连接" tabindex="-1">一、数据库的连接 <a class="header-anchor" href="#一、数据库的连接" aria-label="Permalink to &quot;一、数据库的连接&quot;">​</a></h2><p>在本例中，我们将以sqlite3数据库来实现图书数据库的管理，这里要注意的是，如果采用sqlite3，则配置中的<strong>check_same_thread</strong>标记要设定为False，这是因为sqlite3数据库本身并非一个网络数据库，其默认只能在同一线程中使用，如果不设定该标记，则SQLAlchemy会提示错误，具体代码如下所示：</p><blockquote><p>backend/database.py</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> create_engine </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy.ext.declarative </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> declarative_base </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy.orm </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sessionmaker </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SQLALCHEMY_DATABASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sqlite:///./sql_app.db&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">engine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> create_engine(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SQLALCHEMY_DATABASE_URL</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">connect_args</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;check_same_thread&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">SessionLocal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sessionmaker(</span><span style="color:#FFAB70;">autocommit</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">autoflush</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">bind</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">engine)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> declarative_base()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> create_engine </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy.ext.declarative </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> declarative_base </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy.orm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sessionmaker </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SQLALCHEMY_DATABASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sqlite:///./sql_app.db&quot;</span></span>
<span class="line"><span style="color:#24292E;">engine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_engine(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SQLALCHEMY_DATABASE_URL</span><span style="color:#24292E;">, </span><span style="color:#E36209;">connect_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;check_same_thread&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">SessionLocal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sessionmaker(</span><span style="color:#E36209;">autocommit</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">autoflush</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">engine)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> declarative_base()</span></span></code></pre></div><p>在上述代码中，通过创建一个SessionLocal变量，将当前数据库的连接保存于其中，这样可在其它文件中将其导入使用。 Base是SQLAlchemy的总类，与数据库表对应的数据模型均须继承它。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果要使用mysql数据库，则连接字符串如下：&quot;mysql+pymysql://用户名:密码@主机IP:端口/数据库名?charset=utf8&quot; 建立数据表模型</p></div><p>为演示简单，这里的数据表仅包含三个字段：ID、书名、定价。在当前目录下建立文件<strong>models.py</strong>代码如下：</p><blockquote><p>backend/models.py</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Column, Integer, String  </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> .database </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Base</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Books</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Base</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    __tablename__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;books&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Column(Integer, </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    bookname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Column(String(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">unique</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    prices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Column(Integer)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Column, Integer, String  </span><span style="color:#6A737D;"># type: ignore</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> .database </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Base</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Books</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    __tablename__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;books&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Column(Integer, </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    bookname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Column(String(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">), </span><span style="color:#E36209;">unique</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    prices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Column(Integer)</span></span></code></pre></div><p>在上述代码中，我们建立了表名为books的类Books，该类包含了之前提到的三个字段，注意，这里的书名价格用的是整数表示。 在这里，我们用<code>from .database import Base</code>导入了刚才创建的基类，对于某些编辑器会提示这里的导入警告，一个合适的办法是在当前文件夹下新建一个__init__.py空文件，这样语法检查器会认为这是一个包，可以被导入而不会出现警告信息。</p><h2 id="二、建立架构文件" tabindex="-1">二、建立架构文件 <a class="header-anchor" href="#二、建立架构文件" aria-label="Permalink to &quot;二、建立架构文件&quot;">​</a></h2><p>在<a href="./关于FastAPI与Vue3的通信.html">关于FastAPI与Vue3的通信</a>已经介绍过利用pydantic来检验前端传输数据的功能，这里同样用该包来完成输入或输出数据的类设定，在同一个目录下建立文件<strong>schemas.py</strong>文件，其中建立一个与模型类完全一致的类，这主要是要利用其id属性来完成更改数据的功能，再建立一个去掉id的类，用来新建数据时使用，代码如下：</p><blockquote><p>backend/schemas.py</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Union</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Books</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">: Union[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">    bookname : </span><span style="color:#79B8FF;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    prices : Union[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Config</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        orm_mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BooksBase</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    bookname : </span><span style="color:#79B8FF;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    prices : Union[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Union</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Books</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;">: Union[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">    bookname : </span><span style="color:#005CC5;">str</span></span>
<span class="line"><span style="color:#24292E;">    prices : Union[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Config</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        orm_mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BooksBase</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    bookname : </span><span style="color:#005CC5;">str</span></span>
<span class="line"><span style="color:#24292E;">    prices : Union[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">代码解释</p><p>在上述代码中，类Books有一个内部类class Config，这是pydantic中的一个配置，将其中的orm_mode设定为True，即告诉pydantic，这是一个可以直接映射为对象关系模型的类。而BooksBase类则只是对数据进行校验。</p></div><p>当然，我们可以利用类的继承功能，将上述代码改写如下：</p><blockquote><p>backend/schemas.py</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> typing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Union</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pydantic </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BooksBase</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseModel</span><span style="color:#E1E4E8;">):     </span></span>
<span class="line"><span style="color:#E1E4E8;">    bookname : </span><span style="color:#79B8FF;">str</span></span>
<span class="line"><span style="color:#E1E4E8;">    prices : Union[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Books</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BooksBase</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">: Union[</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Config</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        orm_mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> typing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Union</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pydantic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BooksBase</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseModel</span><span style="color:#24292E;">):     </span></span>
<span class="line"><span style="color:#24292E;">    bookname : </span><span style="color:#005CC5;">str</span></span>
<span class="line"><span style="color:#24292E;">    prices : Union[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Books</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BooksBase</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;">: Union[</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Config</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        orm_mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span></code></pre></div><h2 id="三、增删改查" tabindex="-1">三、增删改查 <a class="header-anchor" href="#三、增删改查" aria-label="Permalink to &quot;三、增删改查&quot;">​</a></h2><p>对数据表的操作单独用一个文件来收集，在同一个目录下建立文件<strong>crud.py</strong>，其中的增删改查代码如下：</p><blockquote><p>backend/crud.py</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> datetime </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> date</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy.orm </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Session</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> . </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> models, schemas </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据书名查询，支持模糊查询</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_books_by_name</span><span style="color:#E1E4E8;">(db: Session, bookname: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> db.query(models.Books).filter(models.Books.bookname.like(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;%</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">bookname</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">%&quot;</span><span style="color:#E1E4E8;">)).all()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据书的\`ID\`删除</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete_book_by_Id</span><span style="color:#E1E4E8;">(db:Session, bookId:</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    db_book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.query(models.Books).filter(models.Books.id </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> bookId).one_or_none()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> db_book </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.delete(db_book)</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 增加书籍信息</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_book</span><span style="color:#E1E4E8;">(db:Session, book:schemas.BooksBase):</span></span>
<span class="line"><span style="color:#E1E4E8;">    curBook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> models.Books(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">bookname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> book.bookname,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">prices</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> book.prices,        </span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.add(curBook)</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.refresh(curBook)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> curBook</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据书的\`ID\`修改书籍信息</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update_book_by_id</span><span style="color:#E1E4E8;">(db:Session, bookId:</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, book:schemas.BooksBase):</span></span>
<span class="line"><span style="color:#E1E4E8;">    db_book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.query(models.Books).filter(models.Books.id </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> bookId).one_or_none()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> db_book </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Update model class variable from requested fields </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> var, value </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vars</span><span style="color:#E1E4E8;">(book).items():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">setattr</span><span style="color:#E1E4E8;">(db_book, var, value) </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.refresh(db_book)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> db_book</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> datetime </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> date</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy.orm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Session</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> . </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> models, schemas </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据书名查询，支持模糊查询</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_books_by_name</span><span style="color:#24292E;">(db: Session, bookname: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> db.query(models.Books).filter(models.Books.bookname.like(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;%</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">bookname</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">%&quot;</span><span style="color:#24292E;">)).all()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据书的\`ID\`删除</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete_book_by_Id</span><span style="color:#24292E;">(db:Session, bookId:</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    db_book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.query(models.Books).filter(models.Books.id </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bookId).one_or_none()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> db_book </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">    db.delete(db_book)</span></span>
<span class="line"><span style="color:#24292E;">    db.commit()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 增加书籍信息</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_book</span><span style="color:#24292E;">(db:Session, book:schemas.BooksBase):</span></span>
<span class="line"><span style="color:#24292E;">    curBook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> models.Books(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">bookname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> book.bookname,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">prices</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> book.prices,        </span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    db.add(curBook)</span></span>
<span class="line"><span style="color:#24292E;">    db.commit()</span></span>
<span class="line"><span style="color:#24292E;">    db.refresh(curBook)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> curBook</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据书的\`ID\`修改书籍信息</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update_book_by_id</span><span style="color:#24292E;">(db:Session, bookId:</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, book:schemas.BooksBase):</span></span>
<span class="line"><span style="color:#24292E;">    db_book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.query(models.Books).filter(models.Books.id </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bookId).one_or_none()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> db_book </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Update model class variable from requested fields </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> var, value </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vars</span><span style="color:#24292E;">(book).items():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">setattr</span><span style="color:#24292E;">(db_book, var, value) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">    db.commit()</span></span>
<span class="line"><span style="color:#24292E;">    db.refresh(db_book)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> db_book</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>上述修改书籍的代码中，我们利用了Python中的vars这个函数，它可以将一个对象的所有属性以字典的方式列举。</p></div><h2 id="四、整合路由" tabindex="-1">四、整合路由 <a class="header-anchor" href="#四、整合路由" aria-label="Permalink to &quot;四、整合路由&quot;">​</a></h2><p>最后，我们在该目录下的<strong>main.py</strong>文件中设定各种不同的路由，调用上述<strong>crud.py</strong>中的函数来完成对数据表的增删改查，代码如下：</p><blockquote><p>backend/main.py</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> fastapi </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Depends, FastAPI, HTTPException</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy.orm </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Session </span><span style="color:#6A737D;">#type: ignore</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> . </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> crud, schemas, models</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> .database </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SessionLocal, engine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据模板文件创建对应的数据表</span></span>
<span class="line"><span style="color:#E1E4E8;">models.Base.metadata.create_all(</span><span style="color:#FFAB70;">bind</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">engine)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FastAPI()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设定数据库连接</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_db</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SessionLocal()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> db</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查询书籍</span></span>
<span class="line"><span style="color:#B392F0;">@app.get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/books/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response_model</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">list[schemas.Books])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_hospital_nums</span><span style="color:#E1E4E8;">(bookname:</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, db:Session</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Depends(get_db)):</span></span>
<span class="line"><span style="color:#E1E4E8;">    db_books </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crud.get_books_by_name(db, </span><span style="color:#FFAB70;">bookname</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bookname)    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> db_books:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> HTTPException(</span><span style="color:#FFAB70;">status_code</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">detail</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;当前书籍名称未查询到相匹配的书籍。&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> db_books</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除书籍</span></span>
<span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/deleteBook/</span><span style="color:#79B8FF;">{bookid}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete_book</span><span style="color:#E1E4E8;">(bookid:</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, db:Session</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Depends(get_db)):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> crud.delete_book_by_Id(db, </span><span style="color:#FFAB70;">bookId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bookid)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改书籍</span></span>
<span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/updateBook/</span><span style="color:#79B8FF;">{bookid}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response_model</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">schemas.Books)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update_book</span><span style="color:#E1E4E8;">(bookid:</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, book:schemas.BooksBase, db:Session</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Depends(get_db)):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> crud.update_book_by_id(db, </span><span style="color:#FFAB70;">bookId</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bookid, </span><span style="color:#FFAB70;">book</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">book)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 新增书籍</span></span>
<span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/books/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response_model</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">schemas.Books)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_book</span><span style="color:#E1E4E8;">(book: schemas.BooksBase, db: Session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Depends(get_db)):</span></span>
<span class="line"><span style="color:#E1E4E8;">    db_book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crud.get_books_by_name(db, </span><span style="color:#FFAB70;">bookname</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">book.bookname)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> db_book:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> HTTPException(</span><span style="color:#FFAB70;">status_code</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">detail</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;该书籍已经存在。&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> crud.create_book(</span><span style="color:#FFAB70;">db</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">db, </span><span style="color:#FFAB70;">book</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">book)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> fastapi </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Depends, FastAPI, HTTPException</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy.orm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Session </span><span style="color:#6A737D;">#type: ignore</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> . </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> crud, schemas, models</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> .database </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SessionLocal, engine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 根据模板文件创建对应的数据表</span></span>
<span class="line"><span style="color:#24292E;">models.Base.metadata.create_all(</span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">engine)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FastAPI()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设定数据库连接</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_db</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SessionLocal()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> db</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        db.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查询书籍</span></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/books/&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response_model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">list[schemas.Books])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_hospital_nums</span><span style="color:#24292E;">(bookname:</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, db:Session</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Depends(get_db)):</span></span>
<span class="line"><span style="color:#24292E;">    db_books </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crud.get_books_by_name(db, </span><span style="color:#E36209;">bookname</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bookname)    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> db_books:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> HTTPException(</span><span style="color:#E36209;">status_code</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, </span><span style="color:#E36209;">detail</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;当前书籍名称未查询到相匹配的书籍。&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> db_books</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除书籍</span></span>
<span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/deleteBook/</span><span style="color:#005CC5;">{bookid}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete_book</span><span style="color:#24292E;">(bookid:</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, db:Session</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Depends(get_db)):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> crud.delete_book_by_Id(db, </span><span style="color:#E36209;">bookId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bookid)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改书籍</span></span>
<span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/updateBook/</span><span style="color:#005CC5;">{bookid}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response_model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">schemas.Books)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update_book</span><span style="color:#24292E;">(bookid:</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, book:schemas.BooksBase, db:Session</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Depends(get_db)):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> crud.update_book_by_id(db, </span><span style="color:#E36209;">bookId</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bookid, </span><span style="color:#E36209;">book</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">book)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 新增书籍</span></span>
<span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/books/&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response_model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">schemas.Books)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_book</span><span style="color:#24292E;">(book: schemas.BooksBase, db: Session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Depends(get_db)):</span></span>
<span class="line"><span style="color:#24292E;">    db_book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crud.get_books_by_name(db, </span><span style="color:#E36209;">bookname</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">book.bookname)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> db_book:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> HTTPException(</span><span style="color:#E36209;">status_code</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, </span><span style="color:#E36209;">detail</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;该书籍已经存在。&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> crud.create_book(</span><span style="color:#E36209;">db</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">db, </span><span style="color:#E36209;">book</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">book)</span></span></code></pre></div><p>至此，五个文件已经全部完成，接下来我们要测试一下这些功能。</p><div class="warning custom-block"><p class="custom-block-title">注意事项</p><p>在导入文件时，一定要注意： 上述文件中，我们是用<code>from . import XXX</code>的方式导入当前文件夹下的其它文件，在这种情况下，如果要成功运行，必须将目录切换至backend的上一级来运行才可以。如果省略.，直接用<code>import XXX</code>来导入当前文件夹下的其它文件，则必须在backend这个当前目录下运行服务器uvicorn的命令</p></div><p>我们采用在backend文件夹的上一级运行服务器的方式。</p><h2 id="五、测试增删改查功能" tabindex="-1">五、测试增删改查功能 <a class="header-anchor" href="#五、测试增删改查功能" aria-label="Permalink to &quot;五、测试增删改查功能&quot;">​</a></h2><p>将目录切换至backend的上一级，在命令窗口运行下列命令： <code>uvicorn backend.main:app --reload --port 8001</code> 然后你会发现在backend的上一级目录中生成了一个数据库文件sql_app.db，此时如果用DB Browser for SQLite这个软件来查看该数据库文件时，会发现我们定义的表已经在其中创建了。</p><p>在FastAPI中，有一个非常强大的文档功能，它可以让我们对刚才编写的程序进行测试。在浏览器地址栏输入<a href="http://127.0.0.1:8001/docs" target="_blank" rel="noreferrer">http://127.0.0.1:8001/docs</a>，进入swagger用户界面，用以管理接口数据。这里只用其来测试我们上述编写的代码是否能成功操作数据库。 <img src="`+l+'" alt="图 1"></p><ul><li>增加数据</li><li>查询</li><li>修改</li><li>删除</li></ul><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>在本文中，我们用一个小例子来说明了如何利用FastAPI和SQLAlchemy来对数据库进行增删除改查操作，熟悉该过程，有助于我们加深对FastAPI操作数据库的理解。</p><h2 id="仓库代码" tabindex="-1">仓库代码 <a class="header-anchor" href="#仓库代码" aria-label="Permalink to &quot;仓库代码&quot;">​</a></h2><p><a href="https://gitee.com/windstarry/fastapi_vue_demo" target="_blank" rel="noreferrer">仓库代码展示</a></p><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><ol><li><a href="./关于FastAPI与Vue3的通信.html">关于FastAPI与Vue3的通信</a></li><li><a href="./FastAPI对数据库的增删改查.html">FastAPI对数据库的增删改查</a></li><li><a href="./基于Vue3和FastAPI对数据库进行操作.html">基于Vue3和FastAPI对数据库进行操作</a></li></ol>',46),c=[e];function t(r,y,E,i,d,F){return n(),a("div",null,c)}const k=s(p,[["render",t]]);export{m as __pageData,k as default};
