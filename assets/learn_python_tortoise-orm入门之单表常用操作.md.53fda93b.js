import{_ as n,o as l,c as p,Q as a,k as s,a as o}from"./chunks/framework.c9ba2ff1.js";const e="/windstarry/assets/7bf174c3fb457543d7356c5e659046b9c1e6e2f8eb91c43dd8a432952c815952.7bf174c3.png",t="/windstarry/assets/a67fb7595f9d4fbe8887a1bf8b9bffc9310f243894defca1e3b3d99f130bcb4b.a67fb759.png",c="/windstarry/assets/0a564d4d2af312d8076dc3ef08aafdfa800bfa34af2694ef86c1b42231c2e4e6.0a564d4d.png",g=JSON.parse('{"title":"tortoise-orm入门之单表常用操作","description":"tortoise-orm入门之单表常用操作","frontmatter":{"title":"tortoise-orm入门之单表常用操作","description":"tortoise-orm入门之单表常用操作","date":"2023-5-19","recommend":1,"sticky":3,"tags":["python","项目实战","tortoise","fastapi"],"categories":["python"]},"headers":[],"relativePath":"learn/python/tortoise-orm入门之单表常用操作.md","filePath":"learn/python/tortoise-orm入门之单表常用操作.md"}'),r={name:"learn/python/tortoise-orm入门之单表常用操作.md"},y=a(`<h1 id="tortoise-orm入门之单表常用操作" tabindex="-1">tortoise-orm入门之单表常用操作 <a class="header-anchor" href="#tortoise-orm入门之单表常用操作" aria-label="Permalink to &quot;tortoise-orm入门之单表常用操作&quot;">​</a></h1><h2 id="创建用户模型" tabindex="-1">创建用户模型 <a class="header-anchor" href="#创建用户模型" aria-label="Permalink to &quot;创建用户模型&quot;">​</a></h2><ul><li>在创建模型类时，把一些公共的字段抽离出来，用继承方式重复利用。</li><li>如果模型类型的字段与数据库字不一样时候，可以通过source_field指定。</li><li>Meta定义表的元数据信息，例如：表名，表描述信息等等</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#models.py</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MixinTimeFiled</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 添加数据时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    created </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.DatetimeField(</span><span style="color:#FFAB70;">null</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">auto_now_add</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 修改数据时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    modified </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.DatetimeField(</span><span style="color:#FFAB70;">null</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">auto_now</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">userModel</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MixinTimeFiled</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.BigIntField(</span><span style="color:#FFAB70;">pk</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;用户ID&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">source_field</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.CharField(</span><span style="color:#FFAB70;">max_length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;用户名&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">source_field</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    phone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.CharField(</span><span style="color:#FFAB70;">max_length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;电话号&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    idcard </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fields.CharField(</span><span style="color:#FFAB70;">max_length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;身份号&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    birthDate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.CharField(</span><span style="color:#FFAB70;">max_length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;出生年月&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    email </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.CharField(</span><span style="color:#FFAB70;">max_length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;邮箱地址&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.CharField(</span><span style="color:#FFAB70;">max_length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;地址信息&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meta</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;users&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#models.py</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MixinTimeFiled</span><span style="color:#24292E;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 添加数据时间</span></span>
<span class="line"><span style="color:#24292E;">    created </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.DatetimeField(</span><span style="color:#E36209;">null</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">auto_now_add</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 修改数据时间</span></span>
<span class="line"><span style="color:#24292E;">    modified </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.DatetimeField(</span><span style="color:#E36209;">null</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">auto_now</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">userModel</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MixinTimeFiled</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.BigIntField(</span><span style="color:#E36209;">pk</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户ID&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span><span style="color:#E36209;">source_field</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.CharField(</span><span style="color:#E36209;">max_length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户名&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">source_field</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.CharField(</span><span style="color:#E36209;">max_length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;电话号&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    idcard </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fields.CharField(</span><span style="color:#E36209;">max_length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;身份号&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    birthDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.CharField(</span><span style="color:#E36209;">max_length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;出生年月&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.CharField(</span><span style="color:#E36209;">max_length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;邮箱地址&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.CharField(</span><span style="color:#E36209;">max_length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;地址信息&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meta</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;users&quot;</span></span></code></pre></div><p>关于各字段的用法查看<a href="https://tortoise.github.io/fields.html#tortoise.models.Model.in_bulk" target="_blank" rel="noreferrer">官方文档</a></p><h3 id="模型设置" tabindex="-1">模型设置 <a class="header-anchor" href="#模型设置" aria-label="Permalink to &quot;模型设置&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> tortoise.models </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Model</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> tortoise.manager </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Manager</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Team</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.IntField(</span><span style="color:#FFAB70;">pk</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fields.TextField()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Meta</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        abstract </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"><span style="color:#E1E4E8;">        table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;team&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        table_description </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        unique_together </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ()</span></span>
<span class="line"><span style="color:#E1E4E8;">        indexes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ()</span></span>
<span class="line"><span style="color:#E1E4E8;">        ordering </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">        manager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Manager</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tortoise.models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Model</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tortoise.manager </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Manager</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Team</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.IntField(</span><span style="color:#E36209;">pk</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fields.TextField()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Meta</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        abstract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">        table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;team&quot;</span></span>
<span class="line"><span style="color:#24292E;">        table_description </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        unique_together </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ()</span></span>
<span class="line"><span style="color:#24292E;">        indexes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ()</span></span>
<span class="line"><span style="color:#24292E;">        ordering </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        manager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Manager</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>abstract:设置为 True 表明这是一个抽象类,不会生成数据表</li><li>table：设置表名，不设置默认已类名作为数据表名</li><li>table_description：设置此项可为为当前模型创建的表生成注释消息 unique_together : 指定 unique_together 为列集设置复合唯一索引，其为元组的元组</li><li>indexes:指定 indexes 为列集设置复合非唯一索引，它应该是元组的元组</li><li>ordering : 指定 ordering 为给定模型设置默认排序。.order_by(...)它应该可以迭代以与接收相同的方式格式化的字符串</li><li>manager: 指定 manager 覆盖默认管理器。它应该是实例 tortoise.manager.Manager 或子类</li></ul></div><h3 id="数据设置" tabindex="-1">数据设置 <a class="header-anchor" href="#数据设置" aria-label="Permalink to &quot;数据设置&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Field(</span><span style="color:#FFAB70;">source_field</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">generated</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">pk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">unique</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">validators</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> kwargs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Field(</span><span style="color:#E36209;">source_field</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">generated</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">pk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">unique</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">description</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">validators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> kwargs)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>source_field (Optional[str]): 如果 DB 列名称需要是特定的而不是从字段名称中生成，则提供 source_field 名称。</li><li>generated (bool): 该字段是否由数据库生成</li><li>pk (bool): 该字段是否为主键</li><li>null (bool): 主键是否可以为空</li><li>default (Optional[Any])：该字段的默认值</li><li>unique (bool) ：该字段的值是否唯一</li><li>index (bool)：设置该字段是否为索引</li><li>description (Optional[str]) ：字段描述，也将出现在Tortoise.desc&gt; ribe_model()生成的 DDL 中并作为 DB 注释出现。</li><li>validators (Optional[List[Union[Validator, Callable]]]) ：此字段的验证器</li></ul></div><h3 id="关系字段" tabindex="-1">关系字段 <a class="header-anchor" href="#关系字段" aria-label="Permalink to &quot;关系字段&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ForeignKeyField(model_name,</span><span style="color:#FFAB70;">related_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">on_delete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;CASCADE&#39;</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">db_constraint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;"> , </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> kwargs )</span></span>
<span class="line"><span style="color:#E1E4E8;">OneToOneField(model_name, </span><span style="color:#FFAB70;">related_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">on_delete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;CASCADE&#39;</span><span style="color:#E1E4E8;"> , </span><span style="color:#FFAB70;">db_constraint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;"> , </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> kwargs )</span></span>
<span class="line"><span style="color:#E1E4E8;">ManyToManyField(model_name, </span><span style="color:#FFAB70;">through</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">forward_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">backward_key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">related_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">on_delete</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;CASCADE&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">db_constraint</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ForeignKeyField(model_name,</span><span style="color:#E36209;">related_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">on_delete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;CASCADE&#39;</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">db_constraint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;"> , </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> kwargs )</span></span>
<span class="line"><span style="color:#24292E;">OneToOneField(model_name, </span><span style="color:#E36209;">related_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">on_delete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;CASCADE&#39;</span><span style="color:#24292E;"> , </span><span style="color:#E36209;">db_constraint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;"> , </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> kwargs )</span></span>
<span class="line"><span style="color:#24292E;">ManyToManyField(model_name, </span><span style="color:#E36209;">through</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">forward_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">backward_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">related_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">on_delete</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;CASCADE&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">db_constraint</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span></code></pre></div>`,13),E=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("ul",null,[s("li",{models:""},"model_name：关联模型的名称{app}."),s("li",null,"related_name：相关模型上的属性名称，用于反向解析外键"),s("li",null,[o("on_delete： "),s("ul",null,[s("li",null,"field.CASCADE：表示如果相关模型被删除，该模型应该被级联删除"),s("li",null,"field.RESTRICT：表示只要有外键指向，相关模型删除就会受到限制"),s("li",null,"field.SET_NULL：将字段重置为 NULL，以防相关模型被删除。仅当字段已设置时才能null=True设置"),s("li",null,"field.SET_DEFAULT：将字段重置为default值，以防相关模型被删除。只能设置是字段有一个default集合")])]),s("li",null,"to_field：建立外键关系的相关模型上的属性名。如果未设置，则使用pk"),s("li",null,"db_constraint： 控制是否应在数据库中为此外键创建约束。默认值为 True，将此设置为 False 可能对数据完整性非常不利"),s("li",null,"through：通过中间表进行连接"),s("li",null,"forward_key： 直通表上的正向查找键。默认值通常是安全的"),s("li",null,"backward_key： 通表上的向后查找键。默认值通常是安全的")])],-1),i=a(`<h2 id="配置数据库相关信息" tabindex="-1">配置数据库相关信息 <a class="header-anchor" href="#配置数据库相关信息" aria-label="Permalink to &quot;配置数据库相关信息&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Tortoise.init(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">db_url</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;mysql://didiplus:didiplus558@192.168.0.220:3306/tortoise&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">modules</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;models&#39;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;models&#39;</span><span style="color:#E1E4E8;">]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Generate the schema</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Tortoise.generate_schemas()  </span><span style="color:#6A737D;"># safe：仅在表不存在时创建表</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Tortoise.init(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">db_url</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;mysql://didiplus:didiplus558@192.168.0.220:3306/tortoise&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">modules</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;models&#39;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;models&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Generate the schema</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Tortoise.generate_schemas()  </span><span style="color:#6A737D;"># safe：仅在表不存在时创建表</span></span></code></pre></div><h2 id="增-create" tabindex="-1">增(Create) <a class="header-anchor" href="#增-create" aria-label="Permalink to &quot;增(Create)&quot;">​</a></h2><p>Tortoise ORM 模型提供了create方法，通过查看源码create方法实际上也是调用了save方法。所以，有两种方式添加数据。</p><p><img src="`+e+`" alt="图片"></p><p>可以使用Faker这个库去模拟用户数据，具体的用法请参考这篇<a href="https://juejin.cn/post/7064457994540417038" target="_blank" rel="noreferrer">文章</a></p><h3 id="_1-save-方法新增数据" tabindex="-1">1.save 方法新增数据： <a class="header-anchor" href="#_1-save-方法新增数据" aria-label="Permalink to &quot;1.save 方法新增数据：&quot;">​</a></h3><p>通过实例化用户模型类的方式，调用save方式创建数据，核心代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fake </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Faker([</span><span style="color:#9ECBFF;">&quot;zh_CN&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">id_card </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.ssn()</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userModel(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fake.name(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">phone</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.phone_number(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">idcard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.ssn(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">birthDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id_card[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.email(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.address()</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> user.save()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">fake </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Faker([</span><span style="color:#032F62;">&quot;zh_CN&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">id_card </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.ssn()</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userModel(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fake.name(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">phone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.phone_number(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">idcard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.ssn(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">birthDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id_card[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">email</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.email(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.address()</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> user.save()</span></span></code></pre></div><p>由于Tortoise ORM采用了异步编程方式，所以，需要通过run_async函数去调用add方式.核心代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    run_async(init()) </span><span style="color:#6A737D;">#连接数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">    run_async(add())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    run_async(init()) </span><span style="color:#6A737D;">#连接数据库</span></span>
<span class="line"><span style="color:#24292E;">    run_async(add())</span></span></code></pre></div><h3 id="_2-create方法新增数据" tabindex="-1">2.create方法新增数据 <a class="header-anchor" href="#_2-create方法新增数据" aria-label="Permalink to &quot;2.create方法新增数据&quot;">​</a></h3><p>直接通过用户模型类赋值方式，然后调用create方法。核心代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add2</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel().create(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fake.name(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">phone</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.phone_number(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">idcard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.ssn(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">birthDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id_card[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.email(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.address()</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add2</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel().create(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fake.name(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">phone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.phone_number(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">idcard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.ssn(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">birthDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id_card[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">email</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.email(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.address()</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span></code></pre></div><p>执行之后，数据库会生成两条数据，如下图： <img src="`+t+`" alt="图 4"></p><h3 id="_3-批量添加数据" tabindex="-1">3.批量添加数据 <a class="header-anchor" href="#_3-批量添加数据" aria-label="Permalink to &quot;3.批量添加数据&quot;">​</a></h3><p>Tortoise ORM模型类中也封装了批量新增数据的函数bulk_create。 通过观察源码的注解，该方法调用方式，只要传入一个list列表，列表里的元素是user模型对象即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bulk_add</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    usersList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        id_card </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.ssn()</span></span>
<span class="line"><span style="color:#E1E4E8;">        user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userModel(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fake.name(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">phone</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.phone_number(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">idcard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.ssn(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">birthDate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id_card[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.email(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fake.address()</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        usersList.append(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.bulk_create(usersList)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bulk_add</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    usersList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        id_card </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.ssn()</span></span>
<span class="line"><span style="color:#24292E;">        user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userModel(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fake.name(),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">phone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.phone_number(),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">idcard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.ssn(),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">birthDate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id_card[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">email</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.email(),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fake.address()</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        usersList.append(user)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.bulk_create(usersList)</span></span></code></pre></div><p>先通过一个for循环生成11个userModel对象，然后中通过调userModel的bulk_create方法，把这个11个用户信息写入数据库中。</p><p><img src="`+c+`" alt="图 3"></p><h2 id="删除-delete" tabindex="-1">删除(Delete) <a class="header-anchor" href="#删除-delete" aria-label="Permalink to &quot;删除(Delete)&quot;">​</a></h2><p>Tortoise ORM模型类中封装了Delete方法，通过过来查询出要删除的对象，然后再调用delete方法。核心代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#删除ID为1的数据，返回的是被改的行数</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteById</span><span style="color:#E1E4E8;">(id):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.filter(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">).delete()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#删除ID为1的数据，返回的是被改的行数</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(id):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.filter(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">).delete()</span></span></code></pre></div><p>Tortoise ORM模型中没有封装批量删除的方式，后续可以根据自己的业务情况自行封装。</p><h2 id="修改-update" tabindex="-1">修改(update) <a class="header-anchor" href="#修改-update" aria-label="Permalink to &quot;修改(update)&quot;">​</a></h2><p>Tortoise ORM模型中封装了几个有关更新的方法，分别是update_from_dict、update_or_create、update。其中update是通过filter查询对象，再更新相应的字段。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.filter(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).update(</span><span style="color:#FFAB70;">address</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fake.address())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.filter(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).update(</span><span style="color:#E36209;">address</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fake.address())</span></span></code></pre></div><h2 id="查看-select" tabindex="-1">查看(select) <a class="header-anchor" href="#查看-select" aria-label="Permalink to &quot;查看(select)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>filter(*args, **kwargs)：使用给定的过滤器创建 QuerySet exclude(*args, **kwargs)：使用给定的排除过滤器创建 QuerySet all()：创建不带过滤器的查询集 first()：创建仅限于一个对象的查询集并返回实例而不是列表 annotate()： 使用额外的函数/聚合对结果进行再过滤</p></div><h3 id="_1-all" tabindex="-1">1.all <a class="header-anchor" href="#_1-all" aria-label="Permalink to &quot;1.all&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#查询所有，返回是用户模型对象[&lt;userModel: 2&gt;,...]</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.all() </span></span>
<span class="line"><span style="color:#6A737D;">#过滤需要的字段，返回dict对象</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.all().values(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.all().order_by(</span><span style="color:#9ECBFF;">&quot;-created&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">#排序，-是降序</span></span>
<span class="line"><span style="color:#6A737D;">#分页查询</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.all().offset(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).limit(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#查询所有，返回是用户模型对象[&lt;userModel: 2&gt;,...]</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.all() </span></span>
<span class="line"><span style="color:#6A737D;">#过滤需要的字段，返回dict对象</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.all().values(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.all().order_by(</span><span style="color:#032F62;">&quot;-created&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">#排序，-是降序</span></span>
<span class="line"><span style="color:#6A737D;">#分页查询</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.all().offset(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).limit(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_2-get" tabindex="-1">2.get <a class="header-anchor" href="#_2-get" aria-label="Permalink to &quot;2.get&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#根据条件查询符合的对象，条件需唯一 return UserModel</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.get(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#6A737D;">#查询不到返回None，避免出现对象不存在的异常</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.get_or_none(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#根据条件查询符合的对象，条件需唯一 return UserModel</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.get(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#6A737D;">#查询不到返回None，避免出现对象不存在的异常</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.get_or_none(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_3-filter-条件过滤" tabindex="-1">3.filter 条件过滤 <a class="header-anchor" href="#_3-filter-条件过滤" aria-label="Permalink to &quot;3.filter 条件过滤&quot;">​</a></h3><p>其实filter的用法和get的差不多，都是通过条件过滤。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 获取第一个符合条件的 return UserModel</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.filter(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;林超&quot;</span><span style="color:#E1E4E8;">).first()</span></span>
<span class="line"><span style="color:#6A737D;"># 获取原生sql</span></span>
<span class="line"><span style="color:#E1E4E8;">userModel.filter(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;林超&quot;</span><span style="color:#E1E4E8;">).sql()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 获取第一个符合条件的 return UserModel</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.filter(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;林超&quot;</span><span style="color:#24292E;">).first()</span></span>
<span class="line"><span style="color:#6A737D;"># 获取原生sql</span></span>
<span class="line"><span style="color:#24292E;">userModel.filter(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;林超&quot;</span><span style="color:#24292E;">).sql()</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>in：检查字段的值是否在传递列表中</li><li>not_in: 检查字段的值是不在传递列表中</li><li>gte：大于或等于传递的值</li><li>gt：大于传递值</li><li>lte：低于或等于传递的值</li><li>lt：低于通过值</li><li>range：介于和给定两个值之间</li><li>isnull：字段为空</li><li>not_isnull：字段不为空</li><li>contains：字段包含指定的子字符串</li><li>icontains：不区分大小写contains</li><li>startswith：如果字段以值开头</li><li>istartswith：不区分大小写startswith</li><li>endswith：如果字段以值结尾</li><li>iendswith：不区分大小写endswith</li><li>iexact：不区分大小写等于</li><li>search：全文搜索</li></ul></div><h3 id="原生sql" tabindex="-1">原生SQL <a class="header-anchor" href="#原生sql" aria-label="Permalink to &quot;原生SQL&quot;">​</a></h3><p>在项目中有时候可能需要执行原生的SQL语言。可以使用下面的方式执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executSQL</span><span style="color:#E1E4E8;">(sql):</span></span>
<span class="line"><span style="color:#E1E4E8;">    conn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connections.get(</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    res</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> conn.execute_query_dict(sql)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executSQL</span><span style="color:#24292E;">(sql):</span></span>
<span class="line"><span style="color:#24292E;">    conn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connections.get(</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    res</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> conn.execute_query_dict(sql)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res</span></span></code></pre></div><h2 id="filter-q" tabindex="-1">filter Q <a class="header-anchor" href="#filter-q" aria-label="Permalink to &quot;filter Q&quot;">​</a></h2><p>Q对象用于创建</p><ul><li>创建 OR 过滤器</li><li>嵌套过滤器</li><li>倒置过滤器</li><li>结合以上任何一种来简单地编写复杂的多层过滤器 在使用之前先执行如下代码引入依赖</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> tortoise.models </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Q</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> userModel.filter(Q(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;蒋洁&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">join_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;OR&quot;</span><span style="color:#E1E4E8;">)).all()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tortoise.models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Q</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> userModel.filter(Q(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;蒋洁&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">,</span><span style="color:#E36209;">join_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;OR&quot;</span><span style="color:#24292E;">)).all()</span></span></code></pre></div><p>关于Q的更多用法请查阅<a href="https://tortoise.github.io/expressions.html?h=q#tortoise.models.Model.in_bulk" target="_blank" rel="noreferrer">官方文档</a></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Q(</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">join_type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;AND&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kwargs</span><span style="color:#E1E4E8;"> )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Q(</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">args</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">join_type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;AND&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">**</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kwargs</span><span style="color:#24292E;"> )</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>join_type：连接类型，OR\\AND</li><li>args ( Q) ：Q要包装的内部表达式</li><li>kwargs ( Any) ：此 Q 对象应封装的过滤语句</li></ul></div><h2 id="f表达式" tabindex="-1">F表达式 <a class="header-anchor" href="#f表达式" aria-label="Permalink to &quot;F表达式&quot;">​</a></h2><p>F对象表示模型字段的值。它可以引用模型字段值并使用它们执行数据库操作，而无需将它们从数据库中拉出到 Python 内存中</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> tortoise.expressions </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> F</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> User.filter(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).update(</span><span style="color:#FFAB70;">balance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> F(</span><span style="color:#9ECBFF;">&#39;balance&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> User.filter(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).update(</span><span style="color:#FFAB70;">balance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> F(</span><span style="color:#9ECBFF;">&#39;balance&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> F(</span><span style="color:#9ECBFF;">&#39;award&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">award</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># or use .save()</span></span>
<span class="line"><span style="color:#E1E4E8;">user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> User.get(</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">user.balance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> F(</span><span style="color:#9ECBFF;">&#39;balance&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> user.save(</span><span style="color:#FFAB70;">update_fields</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;balance&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tortoise.expressions </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> F</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> User.filter(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).update(</span><span style="color:#E36209;">balance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F(</span><span style="color:#032F62;">&#39;balance&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> User.filter(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).update(</span><span style="color:#E36209;">balance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F(</span><span style="color:#032F62;">&#39;balance&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> F(</span><span style="color:#032F62;">&#39;award&#39;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">award</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># or use .save()</span></span>
<span class="line"><span style="color:#24292E;">user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> User.get(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">user.balance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F(</span><span style="color:#032F62;">&#39;balance&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> user.save(</span><span style="color:#E36209;">update_fields</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;balance&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div>`,50),d=[y,E,i];function F(u,h,A,C,D,m){return l(),p("div",null,d)}const b=n(r,[["render",F]]);export{g as __pageData,b as default};
