import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c9ba2ff1.js";const _=JSON.parse('{"title":"深入理解python-with语句","description":"深入理解python-with语句","frontmatter":{"title":"深入理解python-with语句","description":"深入理解python-with语句","date":"2023-4-19","recommend":3,"sticky":3,"tags":["python","项目实战"],"categories":["python"]},"headers":[],"relativePath":"learn/python/深入理解python-with语句.md","filePath":"learn/python/深入理解python-with语句.md"}'),p={name:"learn/python/深入理解python-with语句.md"},o=l(`<h1 id="深入理解python-with-语句" tabindex="-1">深入理解python with 语句 <a class="header-anchor" href="#深入理解python-with-语句" aria-label="Permalink to &quot;深入理解python with 语句&quot;">​</a></h1><p>python中with 语句作为try/finally 编码范式的一种替代, 适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等</p><div class="tip custom-block"><p class="custom-block-title">with语句的优点</p><ul><li>采用with语句的代码更简洁；</li><li>防止因为忘记写f.close()而引发的错误；</li><li>一个对象（上下文）的操作有进入、退出过程就可以抽取出来，并做成自动化执行；</li></ul></div><h2 id="_1-使用with打开文件" tabindex="-1">1.使用with打开文件 <a class="header-anchor" href="#_1-使用with打开文件" aria-label="Permalink to &quot;1.使用with打开文件&quot;">​</a></h2><p>你应该见过下面这种打开文件的方式</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f.readlines()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.readlines()</span></span></code></pre></div><p>上面的写法，与下面的写法在最终效果上是一致的</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f.readlines()</span></span>
<span class="line"><span style="color:#F97583;">except</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    f.close()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.readlines()</span></span>
<span class="line"><span style="color:#D73A49;">except</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#D73A49;">finally</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    f.close()</span></span></code></pre></div><p>对比两段代码不难发现，使用with语句时，代码更加简洁，而且不用主动关闭文件，在with语句体退出时，会自动关闭文件，即便with语句体中发生了异常。</p><h2 id="_2-上下文管理器和with-语句有关的概念" tabindex="-1">2.上下文管理器和with 语句有关的概念 <a class="header-anchor" href="#_2-上下文管理器和with-语句有关的概念" aria-label="Permalink to &quot;2.上下文管理器和with 语句有关的概念&quot;">​</a></h2><p>想要理解with语句，就必须先理解以下几个概念</p><h3 id="_2-1-上下文管理协议" tabindex="-1">2.1 上下文管理协议 <a class="header-anchor" href="#_2-1-上下文管理协议" aria-label="Permalink to &quot;2.1 上下文管理协议&quot;">​</a></h3><p>简单来说，就是实现两个方法，<strong>enter</strong>() 和__exit__()</p><h3 id="_2-2-上下文管理器" tabindex="-1">2.2 上下文管理器 <a class="header-anchor" href="#_2-2-上下文管理器" aria-label="Permalink to &quot;2.2 上下文管理器&quot;">​</a></h3><p>实现了__enter__() 和__exit__()的对象就是上下文管理器</p><blockquote><p>Python上下文管理器是一种特殊类型的函数，可以在其执行期间捕获和管理变量，以及在函数执行结束时自动释放资源。</p></blockquote><h3 id="_2-3-运行时上下文" tabindex="-1">2.3 运行时上下文 <a class="header-anchor" href="#_2-3-运行时上下文" aria-label="Permalink to &quot;2.3 运行时上下文&quot;">​</a></h3><p>由上下文管理器创建，在with语句体代码执行前，通过__enter__()进入，语句体代码执行结束后，通过__exit__()退出</p><h3 id="_2-4-上下文表达式" tabindex="-1">2.4 上下文表达式 <a class="header-anchor" href="#_2-4-上下文表达式" aria-label="Permalink to &quot;2.4 上下文表达式&quot;">​</a></h3><p>在with关键字后面的表达式，表达式返回上下文管理器对象</p><h3 id="_2-5-语句体" tabindex="-1">2.5 语句体 <a class="header-anchor" href="#_2-5-语句体" aria-label="Permalink to &quot;2.5 语句体&quot;">​</a></h3><p>with语句包裹起来的代码</p><h2 id="_3-使用with语句控制线程锁的释放" tabindex="-1">3.使用with语句控制线程锁的释放 <a class="header-anchor" href="#_3-使用with语句控制线程锁的释放" aria-label="Permalink to &quot;3.使用with语句控制线程锁的释放&quot;">​</a></h2><p>使用with不仅能够自动的关闭打开的文件对象，还可以自动的释放线程锁，这样可以避免死锁的发生，在python多线程---线程锁一文中，为避免多个线程同时对一个变量对象进行修改，在关键语句上加了线程锁</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">worker</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">global</span><span style="color:#E1E4E8;"> a</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        m_lock.acquire()    </span><span style="color:#6A737D;"># 加锁</span></span>
<span class="line"><span style="color:#E1E4E8;">        a </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        m_lock.release()    </span><span style="color:#6A737D;"># 释放锁</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">worker</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">global</span><span style="color:#24292E;"> a</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        m_lock.acquire()    </span><span style="color:#6A737D;"># 加锁</span></span>
<span class="line"><span style="color:#24292E;">        a </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        m_lock.release()    </span><span style="color:#6A737D;"># 释放锁</span></span></code></pre></div><p>如果你忘记了写m_lock.release() 对锁进行释放，那么这将导致其他线程永远也无法获取到线程锁，这样就形成了死锁，上面的代码在acquire之后，使用release释放所，使用with语句，可以更加优雅的实现加锁和释放锁的操作。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">worker</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">global</span><span style="color:#E1E4E8;"> a</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> m_lock:</span></span>
<span class="line"><span style="color:#E1E4E8;">            a </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">worker</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">global</span><span style="color:#24292E;"> a</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> m_lock:</span></span>
<span class="line"><span style="color:#24292E;">            a </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><h2 id="_4-同时打开多个文件" tabindex="-1">4.同时打开多个文件 <a class="header-anchor" href="#_4-同时打开多个文件" aria-label="Permalink to &quot;4.同时打开多个文件&quot;">​</a></h2><p>许多人都不知道，with语句可以同时打开多个文件，这样做可以减少代码的缩进，让代码的编写更加容易，两个open语句之间用逗号分隔即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f1, </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f2:</span></span>
<span class="line"><span style="color:#E1E4E8;">    f1.write(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    f2.write(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;w&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f1, </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;w&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f2:</span></span>
<span class="line"><span style="color:#24292E;">    f1.write(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    f2.write(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="_5-自定义上下文管理器" tabindex="-1">5.自定义上下文管理器 <a class="header-anchor" href="#_5-自定义上下文管理器" aria-label="Permalink to &quot;5.自定义上下文管理器&quot;">​</a></h2><p>在调试程序性能时，如果只是想知道某个函数的执行时长，可以使用一个可以统计函数运行时长的装饰器进行处理，但程序往往很复杂，一段代码里，要做很多操作，不只是调用了一个函数，也可能存在循环，因此，单纯的知道某个函数的执行时长，不能帮助我们更好的了解程序的性能。</p><p>我们需要针对某个代码段进行时间统计，知道这一段代码的执行时长对我们很有帮助。你可以使用time.time()方法在代码段开始时获取到时间，在结束时再次获取到时间，两个时间做差就可以得到这个代码段的运行时长，这种操作方式写起来很麻烦，如果有多处代码段需要统计，就得写多次，很不方便。</p><p>下面是一个可以统计代码段运行时长的上下文管理器</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProTime</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, tag</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__enter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.start_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__exit__</span><span style="color:#E1E4E8;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.end_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time_diff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.end_time </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.start_time</span></span>
<span class="line"><span style="color:#E1E4E8;">        msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;代码段</span><span style="color:#79B8FF;">{tag}</span><span style="color:#9ECBFF;">运行时长</span><span style="color:#79B8FF;">{time_diff}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">tag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.tag, </span><span style="color:#FFAB70;">time_diff</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">time_diff)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> ProTime(</span><span style="color:#9ECBFF;">&#39;first&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pt:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> ProTime(</span><span style="color:#9ECBFF;">&#39;second&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pt:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProTime</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, tag</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__enter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.start_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__exit__</span><span style="color:#24292E;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.end_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">        time_diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.end_time </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.start_time</span></span>
<span class="line"><span style="color:#24292E;">        msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;代码段</span><span style="color:#005CC5;">{tag}</span><span style="color:#032F62;">运行时长</span><span style="color:#005CC5;">{time_diff}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">tag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.tag, </span><span style="color:#E36209;">time_diff</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">time_diff)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(msg)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> ProTime(</span><span style="color:#032F62;">&#39;first&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pt:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> ProTime(</span><span style="color:#032F62;">&#39;second&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pt:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>理解这段代码的关键之处，在with语句所包裹的语句体执行之前，先要执行__enter__方法，语句体执行结束之后，不论是否有异常，都要执行__exit__，在__exit__方法里，三个参数提供了异常的全部信息，如果你想处理异常，可以在这个方法里做处理。</p><p>__init__方法有一个tag参数，设置这个参数的目的，是为了在输出信息里区分多个代码块，如果不想设置这个tag，可以考虑对这个上下文管理器进行修改，通过调用栈获得调用信息，准确的指出是哪个代码段的执行时长。</p><p>修改后的上下文管理器如下</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProTime</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, tag</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        frame </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sys._getframe()</span></span>
<span class="line"><span style="color:#E1E4E8;">        tag_frame </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> frame.f_back</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.lineno </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tag_frame.f_lineno</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tag_frame.f_code.co_filename</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__enter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.start_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__exit__</span><span style="color:#E1E4E8;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.end_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time_diff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.end_time </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.start_time</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.tag:</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;代码段</span><span style="color:#79B8FF;">{tag}</span><span style="color:#9ECBFF;">运行时长</span><span style="color:#79B8FF;">{time_diff}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">tag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.tag, </span><span style="color:#FFAB70;">time_diff</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">time_diff)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;文件</span><span style="color:#79B8FF;">{filename}</span><span style="color:#9ECBFF;"> 第 </span><span style="color:#79B8FF;">{lineno}</span><span style="color:#9ECBFF;"> 行代码块执行时长</span><span style="color:#79B8FF;">{time_diff}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">filename</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.filename, </span><span style="color:#FFAB70;">lineno</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.lineno, </span><span style="color:#FFAB70;">time_diff</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">time_diff)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> ProTime(</span><span style="color:#9ECBFF;">&#39;first&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pt:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> ProTime() </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pt:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> ProTime() </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pt:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test()</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProTime</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, tag</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        frame </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sys._getframe()</span></span>
<span class="line"><span style="color:#24292E;">        tag_frame </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> frame.f_back</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.lineno </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tag_frame.f_lineno</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tag_frame.f_code.co_filename</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__enter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.start_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__exit__</span><span style="color:#24292E;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.end_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">        time_diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.end_time </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.start_time</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.tag:</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;代码段</span><span style="color:#005CC5;">{tag}</span><span style="color:#032F62;">运行时长</span><span style="color:#005CC5;">{time_diff}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">tag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.tag, </span><span style="color:#E36209;">time_diff</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">time_diff)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;文件</span><span style="color:#005CC5;">{filename}</span><span style="color:#032F62;"> 第 </span><span style="color:#005CC5;">{lineno}</span><span style="color:#032F62;"> 行代码块执行时长</span><span style="color:#005CC5;">{time_diff}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">filename</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.filename, </span><span style="color:#E36209;">lineno</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.lineno, </span><span style="color:#E36209;">time_diff</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">time_diff)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(msg)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> ProTime(</span><span style="color:#032F62;">&#39;first&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pt:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> ProTime() </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pt:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> ProTime() </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pt:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 这里是你要统计运行时长的代码块</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test()</span></span></code></pre></div><h2 id="_6-开发时常用的with语句" tabindex="-1">6.开发时常用的with语句 <a class="header-anchor" href="#_6-开发时常用的with语句" aria-label="Permalink to &quot;6.开发时常用的with语句&quot;">​</a></h2><h3 id="_6-1打开文件或数据库" tabindex="-1">6.1打开文件或数据库 <a class="header-anchor" href="#_6-1打开文件或数据库" aria-label="Permalink to &quot;6.1打开文件或数据库&quot;">​</a></h3><p>文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;file.txt&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:  </span></span>
<span class="line"><span style="color:#E1E4E8;">    content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f.read()  </span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(content)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;file.txt&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:  </span></span>
<span class="line"><span style="color:#24292E;">    content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.read()  </span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(content)</span></span></code></pre></div><p>数据库：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sqlite3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义数据库连接参数</span></span>
<span class="line"><span style="color:#E1E4E8;">db_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mydb.sqlite&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 数据库文件名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用 with 语句连接数据库</span></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> sqlite3.connect(db_file) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> conn:</span></span>
<span class="line"><span style="color:#E1E4E8;">    cursor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> conn.cursor()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sqlite3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义数据库连接参数</span></span>
<span class="line"><span style="color:#24292E;">db_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mydb.sqlite&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 数据库文件名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用 with 语句连接数据库</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> sqlite3.connect(db_file) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> conn:</span></span>
<span class="line"><span style="color:#24292E;">    cursor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> conn.cursor()</span></span></code></pre></div><blockquote><p>在 with 语句块结束后，连接对象 conn 会自动关闭，从而确保数据库连接被正确关闭，避免资源泄露。</p></blockquote><h3 id="_6-2处理资源-如内存对象或网络连接" tabindex="-1">6.2处理资源，如内存对象或网络连接 <a class="header-anchor" href="#_6-2处理资源-如内存对象或网络连接" aria-label="Permalink to &quot;6.2处理资源，如内存对象或网络连接&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyFile</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, filename, mode):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filename</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__enter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.filename, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.mode)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__exit__</span><span style="color:#E1E4E8;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.file.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用自定义上下文管理器处理文件资源</span></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> MyFile(</span><span style="color:#9ECBFF;">&quot;myfile.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;r&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    contents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">.read()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 对文件内容进行处理</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyFile</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, filename, mode):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filename</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__enter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.filename, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.mode)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__exit__</span><span style="color:#24292E;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.file.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用自定义上下文管理器处理文件资源</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> MyFile(</span><span style="color:#032F62;">&quot;myfile.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    contents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#24292E;">.read()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 对文件内容进行处理</span></span></code></pre></div><blockquote><p>在 with 语句块结束后，文件资源会自动关闭。</p></blockquote><h3 id="_6-3处理线程" tabindex="-1">6.3处理线程 <a class="header-anchor" href="#_6-3处理线程" aria-label="Permalink to &quot;6.3处理线程&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> threading</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyThread</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, name):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> threading.Thread(</span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.run)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__enter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.thread.start()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__exit__</span><span style="color:#E1E4E8;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.thread.join()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 线程的实际运行逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;Thread </span><span style="color:#79B8FF;">{self</span><span style="color:#E1E4E8;">.name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> started&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;Thread </span><span style="color:#79B8FF;">{self</span><span style="color:#E1E4E8;">.name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> finished&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用上下文管理器处理线程</span></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> MyThread(</span><span style="color:#9ECBFF;">&quot;Thread 1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> t1:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Created Thread 1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> threading</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, name):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> threading.Thread(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.run)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__enter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.thread.start()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__exit__</span><span style="color:#24292E;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.thread.join()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 线程的实际运行逻辑</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;Thread </span><span style="color:#005CC5;">{self</span><span style="color:#24292E;">.name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> started&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;Thread </span><span style="color:#005CC5;">{self</span><span style="color:#24292E;">.name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> finished&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用上下文管理器处理线程</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> MyThread(</span><span style="color:#032F62;">&quot;Thread 1&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> t1:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Created Thread 1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div><blockquote><p>在with语句块中，通过MyThread类的实例t1启动了一个线程，并在线程中执行了一些操作。在with语句块结束后，线程会自动运行完毕并资源会被释放。</p></blockquote><h3 id="_6-4处理代理对象" tabindex="-1">6.4处理代理对象 <a class="header-anchor" href="#_6-4处理代理对象" aria-label="Permalink to &quot;6.4处理代理对象&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyProxy</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, target_object):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.target_object </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target_object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__enter__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 在 __enter__() 方法中进行代理对象的初始化操作</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Initializing proxy&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.target_object.connect()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__exit__</span><span style="color:#E1E4E8;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 在 __exit__() 方法中进行代理对象的资源释放操作</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Closing proxy&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.target_object.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模拟代理对象</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyTargetObject</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Connecting to target object&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">do_something</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Doing something&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Closing target object&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用上下文管理器处理代理对象</span></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> MyProxy(MyTargetObject()) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> proxy:</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy.target_object.do_something()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Done&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyProxy</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, target_object):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.target_object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target_object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__enter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 在 __enter__() 方法中进行代理对象的初始化操作</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Initializing proxy&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.target_object.connect()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__exit__</span><span style="color:#24292E;">(self, exc_type, exc_val, exc_tb):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 在 __exit__() 方法中进行代理对象的资源释放操作</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Closing proxy&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.target_object.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模拟代理对象</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyTargetObject</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Connecting to target object&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">do_something</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Doing something&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Closing target object&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用上下文管理器处理代理对象</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> MyProxy(MyTargetObject()) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> proxy:</span></span>
<span class="line"><span style="color:#24292E;">    proxy.target_object.do_something()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Done&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><blockquote><p>在 with 语句块中，通过MyProxy类的实例proxy获取了一个代理对象，并在代理对象上执行了操作。 在 with语句块结束后，垃圾回收机制会自动调用__exit__()方法，从而进行代理对象的资源释放。</p></blockquote>`,55),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const f=s(p,[["render",t]]);export{_ as __pageData,f as default};
